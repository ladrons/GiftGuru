@page "/"

@using System.Text
@using GiftGuru.Components
@using GiftGuru.Enums
@using Markdig
@using OpenAI.Interfaces
@using System.ComponentModel.DataAnnotations
@using OpenAI.ObjectModels
@using OpenAI.ObjectModels.RequestModels

@inject IOpenAIService openAIService


<PageTitle>Gift Guru 🎁</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-gradient-to-br from-pink-200 to-orange-200 p-4">
    <div class="card w-full max-w-md shadow-2xl bg-white rounded-xl transition-transform transform">
        <div class="card-body animate__animated animate__fadeIn p-6">
            <h2 class="text-2xl font-bold text-center animate__animated animate__fadeInDown mb-4 text-pink-600">Akıllı Hediye Asistanınız 🎁</h2>

            <EditForm Model="formModel" OnValidSubmit="HandleFormSubmit" novalidate>
                <DataAnnotationsValidator />

                <div class="space-y-4">
                    <div class="form-control animate__animated animate__fadeInLeft">
                        <label class="label justify-center">
                            <span class="label-text text-sm font-semibold text-orange-600">Kim İçin Hediye Arıyorsunuz?</span>
                        </label>
                        <InputSelect @bind-Value="formModel.Relation" class="select select-bordered w-full bg-pink-50 focus:border-orange-400">
                            @foreach (var relation in relationDictionary)
                            {
                                <option value="@relation.Value">@relation.Key</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => formModel.Relation)" class="text-center text-pink-600 text-xs" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInRight">
                        <label class="label justify-center">
                            <span class="label-text text-sm font-semibold text-orange-600">Cinsiyeti Nedir?</span>
                        </label>
                        <InputRadioGroup Name="genderInputGroup" @bind-Value="formModel.Gender" class="flex justify-center space-x-4">
                            @foreach (var gender in genderDictionary)
                            {
                                <label class="label cursor-pointer">
                                    <InputRadio Name="genderInputGroup" class="radio radio-primary checked:bg-gradient-to-r checked:from-pink-500 checked:to-orange-500 border-2 border-pink-400" Value="@gender.Value" />
                                    <span class="label-text ml-2 text-pink-700">@gender.Key</span>
                                </label>
                            }
                        </InputRadioGroup>
                        <ValidationMessage For="@(() => formModel.Gender)" class="text-center text-pink-600 text-xs" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInLeft">
                        <label class="label justify-center">
                            <span class="label-text text-sm font-semibold text-orange-600">Kaç Yaşında?</span>
                        </label>
                        <InputNumber @bind-Value="formModel.Age" class="input input-bordered w-full bg-pink-50 focus:border-orange-400" />
                        <ValidationMessage For="@(() => formModel.Age)" class="text-center text-pink-600 text-xs" />
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="form-control animate__animated animate__fadeInLeft">
                            <label class="label justify-center">
                                <span class="label-text text-sm font-semibold text-orange-600">Hobileri Nelerdir?</span>
                            </label>
                            <InputText @bind-Value="formModel.Hobbies" class="input input-bordered text-sm w-full bg-pink-50 focus:border-orange-400" placeholder="Yüzme, Kayak, Futbol..." />
                            <ValidationMessage For="@(() => formModel.Hobbies)" class="text-center text-pink-600 text-xs" />
                        </div>

                        <div class="form-control animate__animated animate__fadeInRight">
                            <label class="label justify-center">
                                <span class="label-text text-sm font-semibold text-orange-600">Ne İçin Hediye Arıyorsunuz?</span>
                            </label>
                            <InputSelect @bind-Value="formModel.GiftPurpose" class="select select-bordered w-full bg-pink-50 focus:border-orange-400">
                                <option value="">Seçiniz</option>
                                @foreach (var purpose in purposeDictionary)
                                {
                                    <option value="@purpose.Value">@purpose.Key</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => formModel.GiftPurpose)" class="text-center text-pink-600 text-xs" />
                        </div>
                    </div>

                    <div class="form-control animate__animated animate__fadeInRight">
                        <label class="label justify-center">
                            <span class="label-text text-sm font-semibold text-orange-600">Ne Kadar Bütçe Ayırabilirsiniz? (₺)</span>
                        </label>
                        <InputNumber @bind-Value="formModel.Budget" class="input input-bordered w-full bg-pink-50 focus:border-orange-400" />
                        <ValidationMessage For="@(() => formModel.Budget)" class="text-center text-pink-600 text-xs" />
                    </div>
                </div>

                <div class="form-control mt-6 animate__animated animate__fadeInUp">
                    <button type="submit" class="btn bg-gradient-to-r from-pink-500 to-orange-500 text-white w-full hover:scale-105 transition-transform shadow-lg" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="loading loading-spinner loading-sm"></span>
                        }
                        Hediye Önerilerini Getir 🎁
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="fixed inset-0 bg-gradient-to-br from-pink-500/75 to-orange-500/75 flex items-center justify-center z-50 animate__animated animate__fadeIn">
        <div class="bg-white p-8 rounded-2xl shadow-2xl transform transition-all hover:scale-105">
            <div class="flex flex-col items-center">
                <div class="w-24 h-24 border-t-4 border-b-4 border-pink-500 rounded-full animate-spin"></div>
                <p class="mt-6 text-xl font-bold text-pink-600">Hediye önerileri hazırlanıyor...</p>
                <div class="mt-4 flex space-x-2">
                    <span class="inline-block w-3 h-3 bg-pink-500 rounded-full animate-bounce"></span>
                    <span class="inline-block w-3 h-3 bg-pink-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></span>
                    <span class="inline-block w-3 h-3 bg-pink-300 rounded-full animate-bounce" style="animation-delay: 0.4s"></span>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private static StringBuilder promptBuilder = new StringBuilder();

    private FormModel formModel = new FormModel();

    //Cinsiyet değerlerinin Türkçe karşılıklarını saklayan bir dictionary oluşturuldu.
    Dictionary<string, Gender> genderDictionary = new Dictionary<string, Gender>
    {
        {"Erkek", Gender.Male},
        {"Kadın", Gender.Female},
    };

    Dictionary<string, RelationType> relationDictionary = new Dictionary<string, RelationType>
    {
        {"Ebeveyn", RelationType.Parent},
        {"Çocuk", RelationType.Child},
        {"Kardeş", RelationType.Sibling},
        {"Eş", RelationType.Spouse},
        {"Arkadaş", RelationType.Friend},
        {"İş Arkadaşı", RelationType.Coworker},
        {"Diğer", RelationType.Other},
    };

    Dictionary<string, GiftPurpose> purposeDictionary = new Dictionary<string, GiftPurpose>
    {
        {"Doğum Günü", GiftPurpose.Birthday},
        {"Sevgililer Günü", GiftPurpose.ValentinesDay},
        {"Terfi", GiftPurpose.Promotion},
        {"Yıldönümü", GiftPurpose.Anniversary},
        {"Mezuniyet", GiftPurpose.Graduation},
        {"Düğün", GiftPurpose.Wedding},
        {"Baby Shower", GiftPurpose.BabyShower},
        {"Ev Hediyesi", GiftPurpose.Housewarming},
        {"Emeklilik", GiftPurpose.Retirement},
    };

    private bool isLoading = false;


    private async Task HandleFormSubmit()
    {
        try
        {
            isLoading = true;

            BuildThePrompt();

            var completionResult = await openAIService.ChatCompletion.CreateCompletion(new OpenAI.ObjectModels.RequestModels.ChatCompletionCreateRequest
                {
                    Messages = new List<ChatMessage>
                {
                    ChatMessage.FromSystem(AssistantsPrompt),
                    ChatMessage.FromUser(promptBuilder.ToString())
                },
                    Model = Models.Gpt_4o,
                });

            if (completionResult.Successful)
            {
                var gptContent = completionResult.Choices.First().Message.Content;

                var htmlContent = Markdown.ToHtml(gptContent);

                var parameters = new ModalParameters()
                .Add("GeneratedHtml", htmlContent);

                Modal.Show<GiftResults>(parameters);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void BuildThePrompt()
    {
        promptBuilder.Clear();

        promptBuilder.AppendLine(PromptIntroductionText);

        promptBuilder.AppendLine($"<Relation>{formModel.Relation}</Relation>");
        promptBuilder.AppendLine($"<Gender>{formModel.Gender}</Gender>");
        promptBuilder.AppendLine($"<Age>{formModel.Age}</Age>");
        promptBuilder.AppendLine($"<Hobbies>{formModel.Hobbies}</Hobbies>");
        promptBuilder.AppendLine($"<GiftPurpose>{formModel.GiftPurpose}</GiftPurpose>");
        promptBuilder.AppendLine($"<BudgetInTurkishLiras>{formModel.Budget}</BudgetInTurkishLiras>");
    }

    private const string AssistantsPrompt = "You're a gift assistant serving the Turkish people. You should offer perfect gifts by considering the criteria specified by users. Your suggestions should be specific, and you should avoid extra explanations.";
    private const string PromptIntroductionText = "Please list seven gift ideas with very short descriptions in Turkish in Markdown format, and add appropriate emojis at the beginning of each line. Consider the provided budget in Turkish lira and list the gift suggestions accordingly.";

    //Classes
    protected class FormModel
    {
        [Required]
        public RelationType Relation { get; set; }

        [Required, Range(1, 100)]
        public int Age { get; set; }

        [Required]
        public Gender Gender { get; set; }

        [Required, MaxLength(35)]
        public string Hobbies { get; set; }

        [Required]
        public string GiftPurpose { get; set; }

        [Required, Range(1, 999999)]
        public double Budget { get; set; }
    }
}