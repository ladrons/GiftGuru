@page "/"

@using System.Text
@using GiftGuru.Components
@using GiftGuru.Enums
@using Markdig
@using OpenAI.Interfaces
@using System.ComponentModel.DataAnnotations
@using OpenAI.ObjectModels
@using OpenAI.ObjectModels.RequestModels

@inject IOpenAIService openAIService


<PageTitle>Gift Guru 🎁</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-gradient-to-br from-pink-200 to-orange-200">
    <div class="card w-full max-w-lg shadow-2xl bg-white rounded-xl transition-transform transform">
        <div class="card-body animate__animated animate__fadeIn p-8">
            <h2 class="text-2xl font-bold text-center animate__animated animate__fadeInDown mb-6 text-pink-600">Akıllı Hediye Asistanınız 🎁</h2>

            <EditForm Model="formModel" OnValidSubmit="HandleFormSubmit" novalidate>
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div class="form-control animate__animated animate__fadeInLeft">
                        <label class="label justify-center">
                            <span class="label-text text-lg font-semibold text-orange-600">İlişki Türü</span>
                        </label>
                        <InputSelect @bind-Value="formModel.Relation" class="select select-bordered w-full max-w-xs mx-auto bg-pink-50 focus:border-orange-400">
                            <option value="None" disabled>İlişki türünü seçin</option>
                            @foreach (var relationship in Enum.GetValues<RelationType>().Where(r => r != RelationType.None))
                            {
                                <option value="@relationship">@relationship.ToString()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => formModel.Relation)" class="text-center text-pink-600" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInRight">
                        <label class="label justify-center">
                            <span class="label-text text-lg font-semibold text-orange-600">Cinsiyet</span>
                        </label>
                        <InputRadioGroup Name="genderInputGroup" @bind-Value="formModel.Gender" class="flex justify-center space-x-4">
                            @foreach (var gender in Enum.GetValues<Gender>())
                            {
                                <label class="label cursor-pointer">
                                    <InputRadio Name="genderInputGroup" class="radio radio-primary checked:bg-gradient-to-r checked:from-pink-500 checked:to-orange-500 border-2 border-pink-400" Value="@gender" />
                                    <span class="label-text ml-2 text-pink-700">@gender.ToString()</span>
                                </label>
                            }
                        </InputRadioGroup>
                        <ValidationMessage For="@(() => formModel.Gender)" class="text-center text-pink-600" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInLeft">
                        <label class="label justify-center">
                            <span class="label-text text-lg font-semibold text-orange-600">Yaş</span>
                        </label>
                        <InputNumber @bind-Value="formModel.Age" class="input input-bordered w-full max-w-xs mx-auto bg-pink-50 focus:border-orange-400" />
                        <ValidationMessage For="@(() => formModel.Age)" class="text-center text-pink-600" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInRight">
                        <label class="label justify-center">
                            <span class="label-text text-lg font-semibold text-orange-600">Hobiler</span>
                        </label>
                        <InputText @bind-Value="formModel.Hobbies" class="input input-bordered w-full max-w-xs mx-auto bg-pink-50 focus:border-orange-400" placeholder="Yüzme, Kayak, Futbol..." />
                        <ValidationMessage For="@(() => formModel.Hobbies)" class="text-center text-pink-600" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInRight mt-6">
                        <label class="label justify-center">
                            <span class="label-text text-lg font-semibold text-orange-600">Hediye Duygusu</span>
                        </label>
                        <div class="w-full max-w-xs mx-auto">
                            <InputSelect @bind-Value="formModel.Emotion" class="select select-bordered w-full max-w-xs mx-auto bg-pink-50 focus:border-orange-400">
                                <option value="">Duygu seçin</option>
                                <option value="Duygusal">Duygusal</option>
                                <option value="Eğlenceli">Eğlenceli</option>
                                <option value="Romantik">Romantik</option>
                                <option value="Pratik">Pratik</option>
                                <option value="Lüks">Lüks</option>
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(() => formModel.Emotion)" class="text-center text-pink-600 mt-2" />
                    </div>

                    <div class="form-control animate__animated animate__fadeInLeft">
                        <label class="label justify-center">
                            <span class="label-text text-lg font-semibold text-orange-600">Bütçe</span>
                        </label>
                        <InputNumber @bind-Value="formModel.Budget" class="input input-bordered w-full max-w-xs mx-auto bg-pink-50 focus:border-orange-400" />
                        <ValidationMessage For="@(() => formModel.Budget)" class="text-center text-pink-600" />
                    </div>

                    <div class="form-control mt-8 animate__animated animate__fadeInUp">
                        <button type="submit" class="btn bg-gradient-to-r from-pink-500 to-orange-500 text-white w-full max-w-xs mx-auto hover:scale-105 transition-transform shadow-lg" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="loading loading-spinner loading-sm"></span>
                            }
                            Hediye Önerilerini Getir 🎁
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="fixed inset-0 bg-gradient-to-br from-pink-500/75 to-orange-500/75 flex items-center justify-center z-50 animate__animated animate__fadeIn">
        <div class="bg-white p-8 rounded-2xl shadow-2xl transform transition-all hover:scale-105">
            <div class="flex flex-col items-center">
                <div class="w-24 h-24 border-t-4 border-b-4 border-pink-500 rounded-full animate-spin"></div>
                <p class="mt-6 text-xl font-bold text-pink-600">Hediye önerileri hazırlanıyor...</p>
                <div class="mt-4 flex space-x-2">
                    <span class="inline-block w-3 h-3 bg-pink-500 rounded-full animate-bounce"></span>
                    <span class="inline-block w-3 h-3 bg-pink-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></span>
                    <span class="inline-block w-3 h-3 bg-pink-300 rounded-full animate-bounce" style="animation-delay: 0.4s"></span>
                </div>
            </div>
        </div>
    </div>
}


<!-- Projeye bir de hediyenin hangi duyguyu yansıtması istediğini seçebilme eklenecek.

    Örnek olarak hediyenin 'Daha Duygusal' olmasını seçtiğimizde daha duygusal hediyeler önerilecek.
                           'Daha Eğlenceli' olmasını seçtiğimizde daha eğlenceli hediyeler önerilecek.
                           'Daha Romantik' olmasını seçtiğimizde daha romantik hediyeler önerilecek.'
                           'Daha Pratik' olmasını seçtiğimizde daha pratik hediyeler önerilecek.'
-->

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private static StringBuilder promptBuilder = new StringBuilder();

    private FormModel formModel = new FormModel();

    private bool isLoading = false;


    private async Task HandleFormSubmit()
    {
        try
        {
            isLoading = true;

            BuildThePrompt();

            var completionResult = await openAIService.ChatCompletion.CreateCompletion(new OpenAI.ObjectModels.RequestModels.ChatCompletionCreateRequest
                {
                    Messages = new List<ChatMessage>
                {
                    ChatMessage.FromSystem(AssistantsPrompt),
                    ChatMessage.FromUser(promptBuilder.ToString())                    
                },
                    Model = Models.Gpt_4o,                    
                });

            if (completionResult.Successful)
            {
                var gptContent = completionResult.Choices.First().Message.Content;

                var htmlContent = Markdown.ToHtml(gptContent);

                var parameters = new ModalParameters()
                .Add("GeneratedHtml", htmlContent);

                Modal.Show<GiftResults>(parameters);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleEmotionChange(ChangeEventArgs e, string emotion)
    {
        formModel.Emotion = emotion;
    }

    private void BuildThePrompt()
    {
        promptBuilder.Clear();

        promptBuilder.AppendLine(PromptIntroductionText);

        promptBuilder.AppendLine($"<Relation>{formModel.Relation}</Relation>");
        promptBuilder.AppendLine($"<Gender>{formModel.Gender}</Gender>");
        promptBuilder.AppendLine($"<Age>{formModel.Age}</Age>");
        promptBuilder.AppendLine($"<Hobbies>{formModel.Hobbies}</Hobbies>");
        promptBuilder.AppendLine($"<Emotion>{formModel.Emotion}</Emotion>");
        promptBuilder.AppendLine($"<Budget>{formModel.Budget}</Budget>");
    }


    private const string AssistantsPrompt = "You are an expert birthday gift assistant for Turkish people. Choose the perfect gift and make them happy! Be specific in your suggestions and skip the extra explanations. Pay close attention to the choice of gift sentiment.";
    private const string PromptIntroductionText = "Please list seven gift ideas with very short descriptions in Markdown format and add emojis to the beginning of each line that match the gift idea with the specifications below.";

    //Classes
    protected class FormModel
    {
        [Required]
        public RelationType Relation { get; set; } = RelationType.None;

        [Required, Range(1, 100)]
        public int Age { get; set; } = default;

        [Required, AllowedValues(Gender.Female, Gender.Male)]
        public Gender Gender { get; set; } = Gender.Female;

        [Required, MaxLength(35)]
        public string Hobbies { get; set; } = default;

        [Required]
        public string Emotion { get; set; }

        [Required, Range(1, 999999)]
        public double Budget { get; set; } = default;
    }
}